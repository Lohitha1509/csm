import random
import time
from threading import Thread, Lock

class Vegetable:
    def __init__(self, name, quantity):
        self.name = name
        self.quantity = quantity

class Farmer:
    def __init__(self, name, vegetables_produced):
        self.name = name
        self.vegetables_produced = vegetables_produced

class Market:
    def __init__(self, capacity):
        self.capacity = capacity
        self.vegetables_in_stock = []
        self.waiting_consumers = []
        self.lock = Lock()

    def add_vegetable(self, vegetable):
        with self.lock:
            if len(self.vegetables_in_stock) < self.capacity:
                self.vegetables_in_stock.append(vegetable)
                print(f"{vegetable.name} added to the market by a farmer.")

    def sell_vegetable(self, consumer, vegetable_name):
        with self.lock:
            for vegetable in self.vegetables_in_stock:
                if vegetable.name == vegetable_name and vegetable.quantity > 0:
                    vegetable.quantity -= 1
                    print(f"{consumer} purchased {vegetable.name}. Remaining: {vegetable.quantity}")
                    return True
            print(f"{consumer} is waiting for {vegetable_name}.")
            self.waiting_consumers.append((consumer, vegetable_name))
            return False

    def process_waiting_consumers(self):
        with self.lock:
            for consumer, vegetable_name in self.waiting_consumers:
                for vegetable in self.vegetables_in_stock:
                    if vegetable.name == vegetable_name and vegetable.quantity > 0:
                        vegetable.quantity -= 1
                        print(f"{consumer} purchased {vegetable.name}. Remaining: {vegetable.quantity}")
                        self.waiting_consumers.remove((consumer, vegetable_name))
                        break

def farmer_behavior(farmer, market):
    for vegetable in farmer.vegetables_produced:
        time.sleep(random.uniform(0.5, 1.5))  # Simulating time taken to produce vegetables
        market.add_vegetable(vegetable)

def consumer_behavior(market, name, desired_vegetable):
    while True:
        time.sleep(random.uniform(1, 3))  # Simulating time between customer visits
        if market.sell_vegetable(name, desired_vegetable):
            break

def main():
    market = Market(capacity=5)

    farmer1 = Farmer(name="John", vegetables_produced=[Vegetable("Carrot", 5), Vegetable("Tomato", 8)])
    farmer2 = Farmer(name="Alice", vegetables_produced=[Vegetable("Broccoli", 4), Vegetable("Cucumber", 6)])

    # Create threads for farmers and consumers
    farmer_threads = [Thread(target=farmer_behavior, args=(farmer, market)) for farmer in [farmer1, farmer2]]
    consumer_threads = [Thread(target=consumer_behavior, args=(market, f"Consumer-{i}", "Tomato")) for i in range(5)]

    # Start threads
    for thread in farmer_threads:
        thread.start()

    time.sleep(1)  # Ensure farmers start producing before consumers arrive

    for thread in consumer_threads:
        thread.start()

    # Join threads
    for thread in farmer_threads:
        thread.join()

    for thread in consumer_threads:
        thread.join()

if __name__ == "__main__":
    main()
